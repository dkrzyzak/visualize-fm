{"version":3,"sources":["assets/lastfm-512.png","components/Navbar.tsx","components/AsyncWrapper.tsx","components/PieChart.tsx","components/Hot100Table.tsx","axios.ts","modules/helpers.ts","modules/Hot100Layout.tsx","components/BumpChart.tsx","modules/TopGenresPerYearLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TopBar","Navbar","bg","variant","Brand","href","alt","src","logoImg","width","height","className","Nav","to","Link","wrapperStyles","display","justifyContent","alignItems","marginTop","spinnerStyles","borderWidth","AsyncWrapper","isFetching","children","style","Spinner","animation","PieChart","data","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","defs","id","type","background","color","size","padding","stagger","rotation","lineWidth","spacing","fill","match","theme","fontSize","Top100Table","songsList","Table","striped","bordered","hover","map","song","rank","artist","title","topGenre","port","process","PORT","baseURL","instance","axios","create","getTagsForSongUrl","trackName","formattedArtist","split","artistUri","encodeURI","trackUri","fetch100","startDate","a","formattedDate","dayjs","format","localAxios","get","billboardList","Promise","all","formattedSong","url","tags","hasOwnProperty","toptags","tag","length","tagName","name","toLowerCase","validatedTag","includes","isNaN","parseInt","dataWithTags","countGenres","genres","forEach","formatGenresToPieChartData","countOther","legitimacyThreshold","extraOthers","Object","entries","key","label","value","filter","otherIdx","findIndex","el","sort","b","formatTopGenresForBumpChart","topList","copyOfTopList","JSON","parse","stringify","setOfGenres","Set","yearSummary","genreSummary","add","genre","genreName","push","count","find","year","result","Array","x","y","console","log","Top100Layout","useState","Date","setStartDate","setFetching","fetchedList","setFetchedList","setCountOther","onGenerateBtnClick","newList","Container","Jumbotron","Row","Col","xs","onChange","currentValue","Button","onClick","Hot100Table","BumpChart","marginBottom","marginLeft","colors","scheme","activeLineWidth","inactiveLineWidth","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","pointBorderColor","axisTop","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisRight","axisBottom","axisLeft","TopGenresPerYearLayout","setYear","topGenresList","setTopList","getTopGenresStartingYear","cleanedUpData","formattedData","min","max","step","event","target","App","exact","path","Hot100Layout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.901178d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/lastfm-512.f1084b50.png\";","import React from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport logoImg from '../assets/lastfm-512.png';\r\n\r\nconst TopBar: React.FC = () => {\r\n\treturn (\r\n\t\t<Navbar bg='dark' variant='dark'>\r\n\t\t\t<Navbar.Brand href='#home'>\r\n\t\t\t\t<img alt='' src={logoImg} width='30' height='30' className='d-inline-block align-top' /> Visualize.fm\r\n\t\t\t</Navbar.Brand>\r\n\t\t\t<Nav className='mr-auto'>\r\n\t\t\t\t<LinkContainer to='/hot100'>\r\n\t\t\t\t\t<Nav.Link>Hot 100</Nav.Link>\r\n\t\t\t\t</LinkContainer>\r\n\t\t\t\t<LinkContainer to='/top-genres'>\r\n\t\t\t\t\t<Nav.Link>Ranking gatunków</Nav.Link>\r\n\t\t\t\t</LinkContainer>\r\n\t\t\t</Nav>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\ninterface AsyncWrapperProps {\r\n\tisFetching: boolean;\r\n}\r\n\r\nconst wrapperStyles: React.CSSProperties = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'center',\r\n\talignItems: 'center',\r\n\tmarginTop: 200,\r\n};\r\n\r\nconst spinnerStyles: React.CSSProperties = {\r\n\twidth: '8rem',\r\n\theight: '8rem',\r\n\tborderWidth: '0.75rem',\r\n};\r\n\r\nconst AsyncWrapper: React.FC<AsyncWrapperProps> = ({ isFetching, children }) => {\r\n\treturn isFetching ? (\r\n\t\t<div style={wrapperStyles}>\r\n\t\t\t<Spinner style={spinnerStyles} animation='border' />\r\n\t\t</div>\r\n\t) : (\r\n\t\t<>{children}</>\r\n\t);\r\n};\r\n\r\nexport default AsyncWrapper;\r\n","import { ResponsivePie } from '@nivo/pie';\r\nimport React from 'react';\r\nimport { PieChartDataItem } from '../modules/types';\r\n\r\ninterface PieChartProps {\r\n\tdata: PieChartDataItem[];\r\n}\r\n\r\nconst PieChart: React.FC<PieChartProps> = ({ data }) => {\r\n\treturn (\r\n\t\t<div style={{ width: 1080, height: 500, marginTop: 30 }}>\r\n\t\t\t<ResponsivePie\r\n\t\t\t\tdata={data}\r\n\t\t\t\tmargin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n\t\t\t\tinnerRadius={0.5}\r\n\t\t\t\tpadAngle={0.7}\r\n\t\t\t\tcornerRadius={3}\r\n\t\t\t\tactiveOuterRadiusOffset={8}\r\n\t\t\t\tborderWidth={1}\r\n\t\t\t\tborderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\r\n\t\t\t\tarcLinkLabelsSkipAngle={10}\r\n\t\t\t\tarcLinkLabelsTextColor='#333333'\r\n\t\t\t\tarcLinkLabelsThickness={2}\r\n\t\t\t\tarcLinkLabelsColor={{ from: 'color' }}\r\n\t\t\t\tarcLabelsSkipAngle={10}\r\n\t\t\t\tarcLabelsTextColor={{ from: 'color', modifiers: [['darker', 2]] }}\r\n\t\t\t\tdefs={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: 'dots',\r\n\t\t\t\t\t\ttype: 'patternDots',\r\n\t\t\t\t\t\tbackground: 'inherit',\r\n\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.3)',\r\n\t\t\t\t\t\tsize: 4,\r\n\t\t\t\t\t\tpadding: 1,\r\n\t\t\t\t\t\tstagger: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: 'lines',\r\n\t\t\t\t\t\ttype: 'patternLines',\r\n\t\t\t\t\t\tbackground: 'inherit',\r\n\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.3)',\r\n\t\t\t\t\t\trotation: -45,\r\n\t\t\t\t\t\tlineWidth: 6,\r\n\t\t\t\t\t\tspacing: 10,\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tfill={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmatch: {\r\n\t\t\t\t\t\t\tid: 'pop',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tid: 'dots',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmatch: {\r\n\t\t\t\t\t\t\tid: 'hip-hop',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tid: 'lines',\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\ttheme={{\r\n\t\t\t\t\tfontSize: 20,\r\n\t\t\t\t\t// fontFamily: 'Makhina',\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PieChart;\r\n","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { BillboardTrack } from '../modules/types';\r\n\r\ninterface Hot100TableProps {\r\n\tsongsList: BillboardTrack[];\r\n}\r\n\r\nconst Top100Table: React.FC<Hot100TableProps> = ({ songsList }) => {\r\n\treturn (\r\n\t\t<Table striped bordered hover>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>#</th>\r\n\t\t\t\t\t<th>Wykonawca</th>\r\n\t\t\t\t\t<th>Tytuł utworu</th>\r\n\t\t\t\t\t<th>Gatunek</th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>\r\n\t\t\t\t{songsList.map((song) => (\r\n\t\t\t\t\t<tr key={song.rank}>\r\n\t\t\t\t\t\t<td>{song.rank}</td>\r\n\t\t\t\t\t\t<td>{song.artist}</td>\r\n\t\t\t\t\t\t<td>{song.title}</td>\r\n\t\t\t\t\t\t<td>{song.topGenre}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t</tbody>\r\n\t\t</Table>\r\n\t);\r\n};\r\n\r\nexport default Top100Table;\r\n","import axios from 'axios';\r\n\r\nconst port = process.env.PORT || process.env.REACT_APP_API_PORT;\r\nconst baseURL = `http://localhost:${port}`;\r\n\r\nexport const instance = axios.create({\r\n\tbaseURL,\r\n});\r\n\r\nexport default instance;\r\n","import dayjs from 'dayjs';\r\nimport axios from 'axios';\r\nimport localAxios from '../axios';\r\nimport {\r\n\tBillboardTrack,\r\n\tBillboardTrackApi,\r\n\tBumpChartDataItem,\r\n\tGenres,\r\n\tPieChartDataItem,\r\n\tTagsData,\r\n\tTopGenresPerYear,\r\n\tTopGenresPerYearFromDb,\r\n} from './types';\r\n\r\nconst lastfmAPIKey = process.env.REACT_APP_LASTFM_API_KEY;\r\n\r\nexport const getTagsForSongUrl = (artist: string, trackName: string) => {\r\n\tconst formattedArtist = artist.split(' Featuring')[0].split(' &')[0];\r\n\tconst artistUri = encodeURI(formattedArtist);\r\n\tconst trackUri = encodeURI(trackName);\r\n\r\n\treturn `http://ws.audioscrobbler.com/2.0/?method=track.getTopTags&api_key=${lastfmAPIKey}&artist=${artistUri}&track=${trackUri}&format=json`;\r\n};\r\n\r\nexport const validateTag = (tagName: string) => {\r\n\t// ujednolicenie hip-hop oraz hip hop, traktowanie rapu jako hip-hop (nie dzwońcie na policję)\r\n\tif (tagName === 'hip hop' || tagName === 'hiphop' || tagName.includes('rap')) {\r\n\t\treturn 'hip-hop';\r\n\t}\r\n\r\n\tif (tagName.includes('indie')) {\r\n\t\treturn 'indie';\r\n\t}\r\n\r\n\tif (tagName.includes('rock')) {\r\n\t\treturn 'rock';\r\n\t}\r\n\r\n\tif (tagName.includes('metal')) {\r\n\t\treturn 'metal';\r\n\t}\r\n\r\n\t// for neo-soul\r\n\tif (tagName.includes('soul')) {\r\n\t\treturn 'soul';\r\n\t}\r\n\r\n\t// ujednolicenie r&b oraz rnb\r\n\tif (tagName === 'rnb') {\r\n\t\treturn 'r&b';\r\n\t}\r\n\r\n\t// z reguły jeśli tag składa się z więcej niż 3 pełnych wyrazów, to jest to jakieś zdanie albo fraza, a nie gatunek muzyczny\r\n\tif (tagName.split(' ').length > 3) {\r\n\t\treturn 'other';\r\n\t}\r\n\r\n\t// wywalamy liczby\r\n\tif (!isNaN(parseInt(tagName))) {\r\n\t\treturn 'other';\r\n\t}\r\n\r\n\treturn tagName;\r\n};\r\n\r\nexport const fetch100 = async (startDate: Date): Promise<BillboardTrack[]> => {\r\n\t// zapytanie do lokalnego api po listę hot100 dla danego tygodnia\r\n\tconst formattedDate = dayjs(startDate).format('YYYY-MM-DD');\r\n\tconst { data: billboardList } = await localAxios.get<BillboardTrackApi[]>(`/billboard100?date=${formattedDate}`);\r\n\r\n\tconst dataWithTags = await Promise.all(\r\n\t\tbillboardList.map(async ({ artist, title, rank }) => {\r\n\t\t\t// nie potrzebujemy wszystkich pól które dostarcza nam api, potrzebujemy tylko artist, title oraz rank\r\n\t\t\t// więc mapujemy ten duży obiekt na nieco mniejszy, zawierający tylko te dane które potrzebujemy (+ pobieramy informację co do gatunku)\r\n\t\t\tconst formattedSong: BillboardTrack = {\r\n\t\t\t\tartist,\r\n\t\t\t\ttitle,\r\n\t\t\t\trank,\r\n\t\t\t\ttopGenre: '',\r\n\t\t\t};\r\n\r\n\t\t\tconst url = getTagsForSongUrl(artist, title);\r\n\t\t\ttry {\r\n\t\t\t\t// pobieranie danych o tagach danej piosenki z api last.fm\r\n\t\t\t\tconst { data: tags } = await axios.get<TagsData>(url);\r\n\r\n\t\t\t\t// jeśli dostaniemy błąd z serwera lub lista tagów będzie pusta, to ustawiamy gatunek na other\r\n\t\t\t\tif (tags.hasOwnProperty('error') || !tags.toptags?.tag?.length) {\r\n\t\t\t\t\tformattedSong.topGenre = 'other';\r\n\t\t\t\t\treturn formattedSong;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// przepuszczamy otrzymany najpopularniejszy tag przez walidator\r\n\t\t\t\tconst validatedTag = validateTag(tags.toptags.tag[0].name.toLowerCase());\r\n\t\t\t\tformattedSong.topGenre = validatedTag;\r\n\t\t\t\treturn formattedSong;\r\n\t\t\t} catch (e) {\r\n\t\t\t\t// jeśli wystąpi błąd zapytania to ustawiamy gatunek piosenki na other\r\n\t\t\t\tformattedSong.topGenre = 'other';\r\n\t\t\t\treturn formattedSong;\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n\r\n\treturn dataWithTags;\r\n};\r\n\r\n//  dostajemy obiekt postaci { pop: 12, rock: 16. ... }\r\nexport const countGenres = (billboardList: BillboardTrack[]): Genres => {\r\n\tconst genres: Genres = {};\r\n\tbillboardList.forEach((song) => {\r\n\t\tif (genres.hasOwnProperty(song.topGenre)) {\r\n\t\t\tgenres[song.topGenre] += 1;\r\n\t\t} else {\r\n\t\t\tgenres[song.topGenre] = 1;\r\n\t\t}\r\n\t});\r\n\r\n\treturn genres;\r\n};\r\n\r\n// legitimacyThreshold === ile razy tag musi zostać powtórzonym żeby zostać potraktowanym jako prawdziwy gatunek\r\n// domyślnie 0, czyli każdy tag jest traktowany jako gatunek\r\nexport const formatGenresToPieChartData = (genres: Genres, countOther = false, legitimacyThreshold = 0): PieChartDataItem[] => {\r\n\tlet extraOthers = 0;\r\n\r\n\tconst data: PieChartDataItem[] = Object.entries(genres)\r\n\t\t.map(([key, value]) => ({\r\n\t\t\tid: key,\r\n\t\t\tlabel: key,\r\n\t\t\tvalue: value,\r\n\t\t}))\r\n\t\t.filter(({ value }) => {\r\n\t\t\tif (value < legitimacyThreshold) {\r\n\t\t\t\textraOthers++;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t// wykonujemy tą dodatkową operację tylko jeśli faktycznie wyrzuciliśmy jakieś tagi z listy, ponieważ się nie kwalifikowały ze względu na ilość wystąpień\r\n\tif (extraOthers > 0) {\r\n\t\tconst otherIdx = data.findIndex((el) => el.id === 'other');\r\n\t\tdata[otherIdx].value += extraOthers;\r\n\t}\r\n\r\n\tdata.sort((a, b) => b.value - a.value);\r\n\r\n\treturn countOther ? data : data.filter((el) => el.id !== 'other');\r\n};\r\n\r\nexport const cleanDbDataFromUnnecessaryBs = (topGenresPerYearList: TopGenresPerYearFromDb[]): TopGenresPerYear[] => {\r\n\t// usuwam pola \"__v\" oraz \"_id\" z obiektów, żeby w konsoli łatwiej mi się analizowało te dane\r\n\r\n\treturn topGenresPerYearList.map(({ genres, year }) => {\r\n\t\treturn {\r\n\t\t\tyear,\r\n\t\t\tgenres: genres.map(({ count, genre }) => ({ count, genre })),\r\n\t\t};\r\n\t});\r\n};\r\n\r\nexport const formatTopGenresForBumpChart = (topList: TopGenresPerYear[]): BumpChartDataItem[] => {\r\n\t// tworzę kopię oryginalnej listy (przyda się kawałek później)\r\n\tconst copyOfTopList: TopGenresPerYear[] = JSON.parse(JSON.stringify(topList));\r\n\r\n\t// tworzę zbiór wszystkich gatunków które były w top5 na przestrzeni 5 lat\r\n\tconst setOfGenres = new Set<string>();\r\n\r\n\ttopList.forEach((yearSummary: TopGenresPerYear) => {\r\n\t\tyearSummary.genres.length = 5;\r\n\t\tyearSummary.genres.forEach((genreSummary) => setOfGenres.add(genreSummary.genre));\r\n\t});\r\n\r\n\ttopList.forEach((yearSummary: TopGenresPerYear) => {\r\n\t\tsetOfGenres.forEach((genreName) => {\r\n\t\t\tif (yearSummary.genres.findIndex((el) => el.genre === genreName) === -1) {\r\n\t\t\t\tyearSummary.genres.push({\r\n\t\t\t\t\tgenre: genreName,\r\n\t\t\t\t\tcount: copyOfTopList.find((el) => el.year === yearSummary.year)?.genres.find((el) => el.genre === genreName)?.count ?? 0,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tyearSummary.genres.sort((a, b) => b.count - a.count);\r\n\t});\r\n\r\n\tconst result = Array.from(setOfGenres).map((genreName) => {\r\n\t\tconst data = topList.map((yearSummary) => {\r\n\t\t\treturn {\r\n\t\t\t\tx: yearSummary.year,\r\n\t\t\t\ty: yearSummary.genres.findIndex((genre) => genre.genre === genreName) + 1,\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\tid: genreName,\r\n\t\t\tdata: data,\r\n\t\t};\r\n\t});\r\n\r\n\tconsole.log(topList);\r\n\r\n\treturn result;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Col, Container, Jumbotron, Row } from 'react-bootstrap';\r\nimport { DatePicker, CheckboxToggle } from 'react-rainbow-components';\r\nimport AsyncWrapper from '../components/AsyncWrapper';\r\nimport PieChart from '../components/PieChart';\r\nimport Hot100Table from '../components/Hot100Table';\r\nimport { countGenres, fetch100, formatGenresToPieChartData } from './helpers';\r\nimport { BillboardTrack } from './types';\r\n\r\nconst Top100Layout: React.FC = () => {\r\n\tconst [startDate, setStartDate] = useState(new Date());\r\n\tconst [isFetching, setFetching] = useState(false);\r\n\tconst [fetchedList, setFetchedList] = useState<BillboardTrack[]>([]);\r\n\tconst [countOther, setCountOther] = useState(false);\r\n\r\n\tconst onGenerateBtnClick = async () => {\r\n\t\tsetFetching(true);\r\n\t\ttry {\r\n\t\t\tconst newList = await fetch100(startDate);\r\n\t\t\tsetFetchedList(newList);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t} finally {\r\n\t\t\tsetFetching(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onToggleChange = () => {\r\n\t\tsetCountOther((currentValue) => !currentValue);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Jumbotron style={{ padding: '3rem 2rem' }}>\r\n\t\t\t\t<h1>Billboard Hot 100</h1>\r\n\t\t\t\t<h6>Lista Billboard Hot 100 dla wybranego tygodnia oraz wykres popularności gatunków</h6>\r\n\t\t\t</Jumbotron>\r\n\r\n\t\t\t<Row>\r\n\t\t\t\t<Col xs={5}>\r\n\t\t\t\t\t<DatePicker onChange={(value: Date) => setStartDate(value)} value={startDate} label='Podaj datę' />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={3} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n\t\t\t\t\t<CheckboxToggle label='Traktuj \"other\" jako gatunek' value={countOther} onChange={onToggleChange} />\r\n\t\t\t\t</Col>\r\n\r\n\t\t\t\t<Col xs={4}>\r\n\t\t\t\t\t<Button style={{ width: 200, padding: '10px inherit' }} className='mt-4' onClick={onGenerateBtnClick}>\r\n\t\t\t\t\t\tPobierz listę!\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<AsyncWrapper isFetching={isFetching}>\r\n\t\t\t\t{fetchedList.length > 0 && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<PieChart data={formatGenresToPieChartData(countGenres(fetchedList), countOther, 2)} />\r\n\t\t\t\t\t\t<Hot100Table songsList={fetchedList} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</AsyncWrapper>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default Top100Layout;\r\n","import { ResponsiveBump } from '@nivo/bump';\r\nimport React from 'react';\r\nimport { BumpChartDataItem } from '../modules/types';\r\n\r\ninterface BumpChartProps {\r\n\tdata: BumpChartDataItem[];\r\n}\r\n\r\nconst BumpChart: React.FC<BumpChartProps> = ({ data }) => {\r\n\tconst extraProps = {\r\n\t\tlineWidth: 4,\r\n\t\tactiveLineWidth: 6,\r\n\t\tinactiveLineWidth: 2,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div style={{ width: 1200, height: 500, marginTop: 50, marginBottom: 200, marginLeft: -30 }}>\r\n\t\t\t<ResponsiveBump\r\n\t\t\t\tdata={data}\r\n\t\t\t\tmargin={{ top: 40, right: 200, bottom: 40, left: 60 }}\r\n\t\t\t\tcolors={{ scheme: 'dark2' }}\r\n\t\t\t\t{...(extraProps as any)}\r\n\t\t\t\tinactiveOpacity={0.15}\r\n\t\t\t\tpointSize={10}\r\n\t\t\t\tactivePointSize={16}\r\n\t\t\t\tinactivePointSize={0}\r\n\t\t\t\tpointColor={{ theme: 'background' }}\r\n\t\t\t\tpointBorderWidth={3}\r\n\t\t\t\tactivePointBorderWidth={3}\r\n\t\t\t\tpointBorderColor={{ from: 'serie.color' }}\r\n\t\t\t\ttheme={{\r\n\t\t\t\t\tfontSize: 20,\r\n\t\t\t\t\t// fontFamily: 'Makhina',\r\n\t\t\t\t}}\r\n\t\t\t\taxisTop={{\r\n\t\t\t\t\ttickSize: 5,\r\n\t\t\t\t\ttickPadding: 5,\r\n\t\t\t\t\ttickRotation: 0,\r\n\t\t\t\t\tlegend: '',\r\n\t\t\t\t\tlegendPosition: 'middle',\r\n\t\t\t\t\tlegendOffset: -36,\r\n\t\t\t\t}}\r\n\t\t\t\taxisRight={null}\r\n\t\t\t\taxisBottom={{\r\n\t\t\t\t\ttickSize: 5,\r\n\t\t\t\t\ttickPadding: 5,\r\n\t\t\t\t\ttickRotation: 0,\r\n\t\t\t\t\tlegend: '',\r\n\t\t\t\t\tlegendPosition: 'middle',\r\n\t\t\t\t\tlegendOffset: 32,\r\n\t\t\t\t}}\r\n\t\t\t\taxisLeft={{\r\n\t\t\t\t\ttickSize: 6,\r\n\t\t\t\t\ttickPadding: 5,\r\n\t\t\t\t\ttickRotation: 0,\r\n\t\t\t\t\tlegend: 'ranking',\r\n\r\n\t\t\t\t\tlegendPosition: 'middle',\r\n\t\t\t\t\tlegendOffset: -40,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BumpChart;\r\n","import React, { useState } from 'react';\r\nimport { Button, Col, Container, Jumbotron, Row } from 'react-bootstrap';\r\nimport { Slider } from 'react-rainbow-components';\r\nimport localAxios from '../axios';\r\nimport AsyncWrapper from '../components/AsyncWrapper';\r\nimport BumpChart from '../components/BumpChart';\r\nimport { cleanDbDataFromUnnecessaryBs, formatTopGenresForBumpChart } from './helpers';\r\nimport { BumpChartDataItem, TopGenresPerYearFromDb } from './types';\r\n\r\nconst TopGenresPerYearLayout: React.FC = () => {\r\n\tconst [year, setYear] = useState(1985);\r\n\tconst [isFetching, setFetching] = useState(false);\r\n\tconst [topGenresList, setTopList] = useState<BumpChartDataItem[]>([]);\r\n\r\n\tconst getTopGenresStartingYear = async () => {\r\n\t\tsetFetching(true);\r\n\t\ttry {\r\n\t\t\tconst { data } = await localAxios.get<TopGenresPerYearFromDb[]>(`/topGenresPerYear/${year}`);\r\n\t\t\tconst cleanedUpData = cleanDbDataFromUnnecessaryBs(data);\r\n\t\t\tconst formattedData = formatTopGenresForBumpChart(cleanedUpData);\r\n\t\t\tsetTopList(formattedData);\r\n\t\t} catch (error) {\r\n\t\t\treturn [];\r\n\t\t} finally {\r\n\t\t\tsetFetching(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onChangeYear = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetYear(+event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Container>\r\n\t\t\t\t<Jumbotron style={{ padding: '3rem 2rem' }}>\r\n\t\t\t\t\t<h1>Jak zmieniały się najpopularniejsze gatunki?</h1>\r\n\t\t\t\t\t<h6>Wybierz rok, i zobacz jak preferencje słuchaczy zmieniały się na przestrzeni 5 lat od wybranego roku</h6>\r\n\t\t\t\t</Jumbotron>\r\n\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col xs={9}>\r\n\t\t\t\t\t\t<Slider label='Wybierz rok początkowy' min={1960} max={2016} step={1} value={year} onChange={onChangeYear} />\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col xs={3} style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n\t\t\t\t\t\t<Button style={{ width: 200, padding: '10px inherit' }} onClick={getTopGenresStartingYear}>\r\n\t\t\t\t\t\t\tPobierz dane!\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\r\n\t\t\t<AsyncWrapper isFetching={isFetching}>\r\n\t\t\t\t{topGenresList.length > 0 && (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<BumpChart data={topGenresList} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</AsyncWrapper>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default TopGenresPerYearLayout;\r\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport TopBar from './components/Navbar';\nimport Hot100Layout from './modules/Hot100Layout';\nimport TopGenresPerYearLayout from './modules/TopGenresPerYearLayout';\n\nfunction App() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<div className='App'>\n\t\t\t\t<Container>\n\t\t\t\t\t<TopBar />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t\t<Redirect to='/hot100' />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path='/hot100'>\n\t\t\t\t\t\t\t<Hot100Layout />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path='/top-genres'>\n\t\t\t\t\t\t\t<TopGenresPerYearLayout />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Container>\n\t\t\t</div>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}